(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{564:function(e,t,a){"use strict";a.r(t);var n=a(42),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"tools-release-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tools-release-workflow"}},[e._v("#")]),e._v(" tools - release workflow")]),e._v(" "),a("p",[e._v("By release workflow, i mean all the tasks starting to the commit to be published (excluding Work In Progress, aka WIP commits, to be squashed).")]),e._v(" "),a("p",[e._v("The tasks are :")]),e._v(" "),a("ul",[a("li",[e._v("commit to be released")]),e._v(" "),a("li",[e._v("CHANGELOG generation")]),e._v(" "),a("li",[e._v("CHANGELOG commit")]),e._v(" "),a("li",[e._v("tagging")]),e._v(" "),a("li",[e._v("npm packaging")]),e._v(" "),a("li",[a("code",[e._v("git push")])]),e._v(" "),a("li",[e._v("Git PR/MR (Pull Request / Merge Request) resolution (including CI job)")]),e._v(" "),a("li",[e._v("release to npm registry or deploy to environment (depending of the deliverable nature)")])]),e._v(" "),a("p",[e._v("The operational workflow varies depending on "),a("em",[e._v("where")]),e._v(" theses tasks are executed.")]),e._v(" "),a("p",[e._v("They can be executed on the developer computer or/and in the CI pipeline.")]),e._v(" "),a("p",[e._v("The release workflow is highly coupled the Git workflow, anyway this is another matter.")]),e._v(" "),a("p",[e._v("We could resume the release workflow this way :")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\ncommit ---\x3e CHANGELOG ---\x3e tag ---\x3e merge\n\n                            |\n                            |\n                            V\n\n                         package ---\x3e release\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("h2",{attrs:{id:"foundation-basics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foundation-basics"}},[e._v("#")]),e._v(" foundation basics")]),e._v(" "),a("p",[e._v("Theses tools are based on Git, a common commits messages convention, the semver specification and obviously npm.")]),e._v(" "),a("h3",{attrs:{id:"codebase-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codebase-git"}},[e._v("#")]),e._v(" codebase (Git)")]),e._v(" "),a("p",[e._v("The famous "),a("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Source Control Manager"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Manage the codebase contained in a repository.")]),e._v(" "),a("h3",{attrs:{id:"codebase-revisions-git-commits-messages-convention"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codebase-revisions-git-commits-messages-convention"}},[e._v("#")]),e._v(" codebase revisions (Git commits messages convention)")]),e._v(" "),a("p",[e._v("Popularized by AngularJS team. Can be "),a("a",{attrs:{href:"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines",target:"_blank",rel:"noopener noreferrer"}},[e._v("found here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Each codebase revision is hold in a commit. Each commit contain a commit message.")]),e._v(" "),a("p",[e._v("Commit message standardization leads to :")]),e._v(" "),a("ul",[a("li",[e._v("CHANGELOG generation automation.")]),e._v(" "),a("li",[e._v("version generation (tagging) automation.")])]),e._v(" "),a("h3",{attrs:{id:"versions-system-semver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#versions-system-semver"}},[e._v("#")]),e._v(" versions system (Semver)")]),e._v(" "),a("p",[e._v("Popularized by npm to manage the version system.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dedicated website semver.org"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("It is about how to structure a version number and for what meaning.")]),e._v(" "),a("h3",{attrs:{id:"deliverable-management-npm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deliverable-management-npm"}},[e._v("#")]),e._v(" deliverable management (npm)")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("node package manager"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("ul",[a("li",[e._v("Manage the dependencies in a project.")]),e._v(" "),a("li",[e._v('Structure the deliverable (named "package" in npm world), the npm registry store the deliverable. Users download packages from it.')])]),e._v(" "),a("p",[e._v("The following npm CLI commands are especially involved :")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.npmjs.com/cli/version.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("npm version")]),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.npmjs.com/cli/pack.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("npm pack")]),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("Commands like "),a("code",[e._v("npm build")]),e._v(", "),a("code",[e._v("npm test")]),e._v(", "),a("code",[e._v("npm ci")]),e._v(" are obviously also involved, but they are already involved in the development process.")]),e._v(" "),a("h3",{attrs:{id:"articles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#articles"}},[e._v("#")]),e._v(" articles")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://hackernoon.com/these-6-essential-tools-will-maintain-your-npm-modules-for-you-4cbbee88e0cb",target:"_blank",rel:"noopener noreferrer"}},[e._v("These 6 essential tools will release, version, and maintain your NPM modules for you - hackernoon.com - 20180425"),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("ul",[a("li",[e._v("Automate your releases and semantic versioning with "),a("code",[e._v("semantic-release")])]),e._v(" "),a("li",[e._v("Use "),a("code",[e._v("commitizen")]),e._v(" with "),a("code",[e._v("cz-convential-changelog")]),e._v(" to capture additional details about each commit")]),e._v(" "),a("li",[e._v("Run Automated Tests that generate Code Coverage reports")]),e._v(" "),a("li",[e._v("Maintain coverage standards with "),a("code",[e._v("Codecov")])]),e._v(" "),a("li",[e._v("Ensure consistent code formatting, and avoid simple mistakes by Linting your code")]),e._v(" "),a("li",[e._v("Keep your dependencies up to date with "),a("code",[e._v("GreenKeeper")])])])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://michaljanaszek.com/blog/lerna-conventional-commits",target:"_blank",rel:"noopener noreferrer"}},[e._v("Semantic Release with Lerna and Conventional Commits - michaljanaszek.com/blog - 20180616"),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("In this tutorial, I will show you how to configure Lerna with Conventional Commits to achieve automatic Semantic Release based only on the history of commits.")]),e._v(" "),a("p",[e._v("Conventional Commits + Conventional Changelog + Semantic Release + Commitlint")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://samhogy.co.uk/2018/08/lerna-independent-mode-with-semver.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lerna Independent Mode with Semver - samhogy.co.uk - 20180816"),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("focus on lerna independent mode with semantic versioning.")])]),e._v(" "),a("h2",{attrs:{id:"tools-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tools-overview"}},[e._v("#")]),e._v(" tools overview")]),e._v(" "),a("h3",{attrs:{id:"monorepo-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monorepo-management"}},[e._v("#")]),e._v(" monorepo management")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("lerna/lerna")]),e._v(" - "),a("code",[e._v("github.com")]),a("OutboundLink")],1),e._v(" / "),a("a",{attrs:{href:"https://lernajs.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("lernajs.io"),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("A tool for managing JavaScript projects with multiple packages")])]),e._v(" "),a("p",[e._v("Lerna config belongs to "),a("code",[e._v("lerna.json")]),e._v(" file.")]),e._v(" "),a("p",[e._v("Logs goes into "),a("code",[e._v("lerna-debug.log")]),e._v(" file.")]),e._v(" "),a("h4",{attrs:{id:"features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[e._v("#")]),e._v(" Features")]),e._v(" "),a("ul",[a("li",[e._v("Version / tag management in 2 modes :\n"),a("ul",[a("li",[e._v("Fixed/Locked mode (every package got the same version number / tag)")]),e._v(" "),a("li",[e._v("Independent mode (each package got his own version number / tag)")])])]),e._v(" "),a("li",[e._v("Common "),a("code",[e._v("devDependencies")]),e._v(" (hoisting of common dependencies, most of the "),a("code",[e._v("devDependencies")]),e._v(" are commons)")])]),e._v(" "),a("p",[e._v("WARNING : lerna used with semantic-release is not mature at all. See "),a("a",{attrs:{href:"https://github.com/semantic-release/semantic-release/issues/193",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue on semantic-release repo"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"dependencies-automatic-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependencies-automatic-management"}},[e._v("#")]),e._v(" dependencies automatic management")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://greenkeeper.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("greenkeeper.io"),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://github.com/greenkeeperio",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("greenkeeperio")]),e._v(" - "),a("code",[e._v("github.com")]),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("Get safety & consistency with real-time monitoring and automatic updates for npm dependencies")])]),e._v(" "),a("h3",{attrs:{id:"commit-message-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-management"}},[e._v("#")]),e._v(" commit message management")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.conventionalcommits.org/en/v1.0.0-beta.3/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Conventional Commits"),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("A specification for adding human and machine readable meaning to commit messages")])]),e._v(" "),a("p",[e._v("Commit message structure :")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("conventional-changelog/commitlint")]),e._v(" - "),a("code",[e._v("github.com")]),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("Lint commit messages")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("commitizen/cz-cli")]),e._v(" - "),a("code",[e._v("github.com")]),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("The commitizen command line utility.")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/commitizen/cz-conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("commitizen/cz-conventional-changelog")]),e._v(" - "),a("code",[e._v("github.com")]),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("A commitizen adapter for the angular preset of "),a("a",{attrs:{href:"https://github.com/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[e._v("conventional-changelog"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"changelog-md-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changelog-md-management"}},[e._v("#")]),e._v(" "),a("code",[e._v("CHANGELOG.md")]),e._v(" management")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.npmtrends.com/standard-version-vs-semantic-release-vs-conventional-changelog-vs-generate-changelog-vs-@semantic-release/github-vs-@semantic-release/release-notes-generator-vs-@semantic-release/npm",target:"_blank",rel:"noopener noreferrer"}},[e._v("npmtrends.com comparison"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("2 years time range give a better view :")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("generate-changelog")]),e._v(" have really low usage.")]),e._v(" "),a("li",[a("strong",[e._v("conventional-changelog")]),e._v(" is the older and the most used but adoption seems stable.")]),e._v(" "),a("li",[a("strong",[e._v("semantic-release")]),e._v(" is growing quite fast since mid-2018, close to "),a("strong",[e._v("conventional-changelog")]),e._v(" adoption and still growing.")])]),e._v(" "),a("h4",{attrs:{id:"lob-generate-changelog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lob-generate-changelog"}},[e._v("#")]),e._v(" lob/generate-changelog")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/lob/generate-changelog",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("lob/generate-changelog")]),e._v(" - "),a("code",[e._v("github.com")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("The simpler one.")]),e._v(" "),a("p",[e._v("Limited to the "),a("code",[e._v("CHANGELOG.md")]),e._v(" file generation.")]),e._v(" "),a("p",[e._v("Recommendations available for the tag and push tasks.")]),e._v(" "),a("h4",{attrs:{id:"conventional-changelog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conventional-changelog"}},[e._v("#")]),e._v(" conventional-changelog")]),e._v(" "),a("p",[a("strong",[e._v("Executed on the developer computer manually by the developer.")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("conventional-changelog")]),e._v(" - "),a("code",[e._v("github.com")]),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"}},[e._v("standard-version"),a("OutboundLink")],1),e._v(" is the high level entry point repo.")]),e._v(" "),a("p",[a("code",[e._v("standard-version")]),e._v(" does the following:")]),e._v(" "),a("ol",[a("li",[e._v("bumps the version in metadata files (package.json, composer.json, etc).")]),e._v(" "),a("li",[e._v("uses "),a("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[e._v("conventional-changelog"),a("OutboundLink")],1),e._v(" to update "),a("em",[e._v("CHANGELOG.md")])]),e._v(" "),a("li",[e._v("commits "),a("em",[e._v("package.json (et al.)")]),e._v(" and "),a("em",[e._v("CHANGELOG.md")])]),e._v(" "),a("li",[e._v("tags a new release")])]),e._v(" "),a("h4",{attrs:{id:"others-tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#others-tools"}},[e._v("#")]),e._v(" Others tools")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/conventional-changelog/releaser-tools",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("releaser-tools")]),e._v(" - "),a("code",[e._v("github.com/conventional-changelog")]),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("Create a GitHub/GitLab/etc. release using a project's commit messages and metadata.")])]),e._v(" "),a("h4",{attrs:{id:"semantic-release"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#semantic-release"}},[e._v("#")]),e._v(" semantic-release")]),e._v(" "),a("p",[e._v("Executed by a CI job.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/semantic-release",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("semantic-release")]),e._v(" - "),a("code",[e._v("github.com")]),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://semantic-release.gitbook.io/semantic-release/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("semantic-release")]),e._v(" - "),a("code",[e._v("semantic-release.gitbook.io")]),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("semantic-release")]),e._v(" automates the whole package release workflow including: determining the next version number, generating the release notes and publishing the package.")]),e._v(" "),a("p",[e._v("This removes the immediate connection between human emotions and version numbers, strictly following the "),a("a",{attrs:{href:"http://semver.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Semantic Versioning"),a("OutboundLink")],1),e._v(" specification.")])]),e._v(" "),a("h4",{attrs:{id:"conventional-changelog-versus-semantic-release"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conventional-changelog-versus-semantic-release"}},[e._v("#")]),e._v(" conventional-changelog versus semantic-release")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version/issues/3",target:"_blank",rel:"noopener noreferrer"}},[e._v("explain the relationship to semantic-release - "),a("code",[e._v("github.com/conventional-changelog")]),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version/issues/22",target:"_blank",rel:"noopener noreferrer"}},[e._v("How is it different than "),a("code",[e._v("semantic-release")]),e._v(" - "),a("code",[e._v("github.com/conventional-changelog")]),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/semantic-release/semantic-release",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("semantic-release")]),a("OutboundLink")],1),e._v(" is a fully automated library/system for versioning, changelog generation, Git tagging, and publishing to the npm registry.")]),e._v(" "),a("p",[a("code",[e._v("standard-version")]),e._v(" is different because it handles the versioning, changelog generation, and Git tagging for you "),a("strong",[e._v("without")]),e._v(" automatic pushing (to GitHub) or publishing (to an npm registry). Use of "),a("code",[e._v("standard-version")]),e._v(" only affects your local Git repo - it doesn't affect remote resources at all. After you run "),a("code",[e._v("standard-version")]),e._v(", you still have to ability to review things and correct mistakes if you want to.")]),e._v(" "),a("p",[e._v("They are both based on the same foundation of structured commit messages (using "),a("a",{attrs:{href:"https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Angular format"),a("OutboundLink")],1),e._v("), but "),a("code",[e._v("standard-version")]),e._v(" is a good choice for folks who are not yet comfortable letting publishes go out automatically. In this way, you can view "),a("code",[e._v("standard-version")]),e._v(" as an incremental step to adopting "),a("code",[e._v("semantic-release")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"a-working-continuous-delivery-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-working-continuous-delivery-workflow"}},[e._v("#")]),e._v(" a working continuous delivery workflow")]),e._v(" "),a("h3",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" overview")]),e._v(" "),a("p",[e._v("Setup a continuous delivery workflow with as much automation as possible from commit to deployment.")]),e._v(" "),a("p",[e._v("The CI service used is "),a("a",{attrs:{href:"https://travis-ci.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("TravisCI"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("GitHooks are managed by "),a("a",{attrs:{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"}},[e._v("Husky"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Commit message convention used is "),a("a",{attrs:{href:"https://www.conventionalcommits.org/en/v1.0.0-beta.3/",target:"_blank",rel:"noopener noreferrer"}},[e._v("www.conventionalcommits.org"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Commit messages are linted by "),a("a",{attrs:{href:"https://conventional-changelog.github.io/commitlint/#/",target:"_blank",rel:"noopener noreferrer"}},[e._v("commitlint"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Commit can be produced with the help of the "),a("a",{attrs:{href:"http://commitizen.github.io/cz-cli/",target:"_blank",rel:"noopener noreferrer"}},[e._v("commitizen CLI"),a("OutboundLink")],1),e._v(" with the "),a("a",{attrs:{href:"https://github.com/commitizen/cz-conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[e._v("cz-conventional-changelog"),a("OutboundLink")],1),e._v(" config.")]),e._v(" "),a("p",[e._v("Automation is provided by "),a("a",{attrs:{href:"https://github.com/semantic-release/semantic-release",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic-release"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"git-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-workflow"}},[e._v("#")]),e._v(" Git workflow")]),e._v(" "),a("p",[e._v("Two branches, "),a("code",[e._v("master")]),e._v(" and "),a("code",[e._v("develop")]),e._v(", both must be protected.")]),e._v(" "),a("p",[a("code",[e._v("develop")]),e._v(" is the target for every PR. Set it as default branch instead of "),a("code",[e._v("master")]),e._v(" branch.")]),e._v(" "),a("p",[e._v("PR are done with classic features branches based on "),a("code",[e._v("develop")]),e._v(", never based on "),a("code",[e._v("master")]),e._v(".")]),e._v(" "),a("p",[a("code",[e._v("master")]),e._v(" is the distribution channel to deploy.")]),e._v(" "),a("p",[e._v("Every branch push trigger a CI job.")]),e._v(" "),a("p",[e._v("A CI job is composed of 3 stages :")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("commitlint")]),e._v(" stage to reject malformed commit message")]),e._v(" "),a("li",[a("code",[e._v("test")]),e._v(" stage to reject invalid commit content (test should execute at least lint + tests)")]),e._v(" "),a("li",[a("code",[e._v("deploy")]),e._v(" stage triggered only by the "),a("code",[e._v("master")]),e._v(" branch to build the package and deploy it to the npm registry.")])]),e._v(" "),a("p",[e._v("It also determine the version number, compute the release CHANGELOG, tag the tip of the branch and push it with release CHANGELOG to origin.")]),e._v(" "),a("p",[e._v("To deploy, the Git owner must merge locally "),a("code",[e._v("develop")]),e._v(" into "),a("code",[e._v("master")]),e._v(". It should be always a fast-forward, "),a("code",[e._v("develop")]),e._v(" and "),a("code",[e._v("master")]),e._v(" are mirrors.")]),e._v(" "),a("p",[e._v("Never use a PR to merge "),a("code",[e._v("develop")]),e._v(" into "),a("code",[e._v("master")]),e._v(", semantic-release will not trigger the deploy stage for a PR.")]),e._v(" "),a("h3",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" installation")]),e._v(" "),a("p",[e._v("Before any steps, be sure to have a valid "),a("code",[e._v("package.json")]),e._v(" file, and especially a fulfilled "),a("code",[e._v('"repository"')]),e._v(" section in it.")]),e._v(" "),a("p",[e._v("You should also already have a "),a("code",[e._v(".npmignore")]),e._v(" file with a content like this :")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("node_modules/\npublic/\ndist/\nnpm-debug.log\n.DS_Store\n.idea/\n*.tgz\ntest-utils/\ntests/\n.editorconfig\n.eslintignore\n.eslintrc.json\n.npmrc\ntsconfig.json\ntsconfig-dev.json\ntslint.json\n.travis.yml\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br")])]),a("p",[e._v("install semantic-release in your project :")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i -D semantic-release\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("install semantic-release-cli :")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i -g semantic-release-cli\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("configure semantic-release :")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("semantic-release-cli setup\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("Answer the questions, you will need to provide your logins / passwords for npm registry and GitHub account.\nsemantic-release will generate tokens with them and will push them to TravisCI to allows the CI job to push into them.")]),e._v(" "),a("p",[e._v("GitHub webhook will be automatically configured.\nTravisCI job will be automatically created and configured during the first deploy attempt (push on the "),a("code",[e._v("master")]),e._v(" branch).")]),e._v(" "),a("p",[e._v("The version number in your "),a("code",[e._v("package.json")]),e._v(" will be set to "),a("code",[e._v("0.0.0-development")]),e._v(" and will never move.\nsemantic-release modify only the "),a("code",[e._v("package.json")]),e._v(" put into the npm package sent to the registry.")]),e._v(" "),a("p",[e._v("install commitizen :")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i -D commitizen cz-conventional-changelog\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("commitizen")]),e._v(" provide a CLI wizard to help creating valid commit messages")]),e._v(" "),a("p",[a("code",[e._v("cz-conventional-changelog")]),e._v(" describe the desired commit format (for this example it is "),a("a",{attrs:{href:"https://www.conventionalcommits.org/en/v1.0.0-beta.3/",target:"_blank",rel:"noopener noreferrer"}},[e._v("the conventional changelog spec"),a("OutboundLink")],1),e._v(")")]),e._v(" "),a("p",[e._v("configure commitizen :")]),e._v(" "),a("p",[e._v("In your "),a("code",[e._v("package.json")]),e._v(", add this section to configure "),a("code",[e._v("commitizen")]),e._v(" :")]),e._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"config"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"commitizen"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"path"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"./node_modules/cz-conventional-changelog"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("And under the "),a("code",[e._v("script")]),e._v(" section add this command :")]),e._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"cz-commit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git-cz"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("To avoid conflict with "),a("code",[e._v("husky")]),e._v(", prefix the script with "),a("code",[e._v("cz-")]),e._v(" (defaut in the documentation is just "),a("code",[e._v("commit")]),e._v(").")]),e._v(" "),a("p",[e._v("commitizen usage :")]),e._v(" "),a("p",[e._v("Stages the files you want to commit, then use the CLI tool with "),a("code",[e._v("npm run cz-commit")]),e._v(" then answer the questions.")]),e._v(" "),a("p",[e._v("install commitlint :")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i -D @commitlint/cli @commitlint/config-conventional @commitlint/travis-cli\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("Same as "),a("code",[e._v("commitizen")]),e._v(", the "),a("code",[e._v("commitlint")]),e._v(" CLI is configured with the "),a("code",[e._v("@commitlint/config-conventional")]),e._v(" package to define the commit message convention used.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("@commitlint/travis-cli")]),e._v(" will be used in the TravisCI job to lint server side en enforce the convention.")]),e._v(" "),a("p",[e._v("configure commitlint :")]),e._v(" "),a("p",[e._v("Add this section to your "),a("code",[e._v("package.json")]),e._v(" to configure "),a("code",[e._v("commitlint")]),e._v(" :")]),e._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"commitlint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"extends"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"@commitlint/config-conventional"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("Add a hook to the "),a("code",[e._v("husky")]),e._v(" configuration in your "),a("code",[e._v("package.json")]),e._v(" :")]),e._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"commit-msg"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"commitlint -E HUSKY_GIT_PARAMS"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("Each local commit attempt will trigger "),a("code",[e._v("commitlint")]),e._v(".")]),e._v(" "),a("p",[e._v("Your "),a("code",[e._v("husky")]),e._v(" configuraton in your "),a("code",[e._v("package.json")]),e._v(" should look like this :")]),e._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"commit-msg"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"commitlint -E HUSKY_GIT_PARAMS"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"pre-commit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"pre-push"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm test"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("create and fill your "),a("code",[e._v(".travis.yml")]),e._v(" file.")]),e._v(" "),a("p",[e._v("This content should do the job :")]),e._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("language")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" node_js\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node_js")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" npm\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("install")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" npm ci\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("branches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("except")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/^v\\d+\\.\\d+\\.\\d+$/'")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("jobs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("include")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" commitlint\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" commitlint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("travis\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" test\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" npm run test\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" deploy\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" branch == master "),a("span",{pre:!0,attrs:{class:"token important"}},[e._v("&&")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token tag"}},[e._v("!fork")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node_js")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'10'")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" npm install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("g semantic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("release@^15\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" semantic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("release\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br")])]),a("p",[a("code",[e._v("semantic-release")]),e._v(" is tested only with the last LTS node version. So your app should do the same.")]),e._v(" "),a("h3",{attrs:{id:"initialize-the-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-the-workflow"}},[e._v("#")]),e._v(" initialize the workflow")]),e._v(" "),a("p",[e._v("You should have already an initial commit. The message commit convention for this commit is not important.")]),e._v(" "),a("p",[e._v("The next commit should contain all this configuration and should be able to generate something to package and deliver to the npm registry.")]),e._v(" "),a("p",[e._v("Be careful to choose a "),a("em",[e._v("feat")]),e._v(" or "),a("em",[e._v("fix")]),e._v(" type for the commit message. Others type will not trigger a release.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("develop")]),e._v(" branch should not exist yet.")]),e._v(" "),a("p",[e._v("When the commit is written, push it directly into "),a("code",[e._v("master")]),e._v(" to trigger the first CI job and the first deploy.")]),e._v(" "),a("p",[e._v("This deploy is mandatory because TravisCI needs the "),a("code",[e._v(".travis.yml")]),e._v(" files present into each branches in order to run.")]),e._v(" "),a("p",[e._v("So you need first to deploy a dummy app version, then the contribution branch which will be the destination for PR will be created based on "),a("code",[e._v("master")]),e._v(".")]),e._v(" "),a("p",[e._v("Check the CI result. Check also the npm registry.")]),e._v(" "),a("p",[e._v("At this point, if everything is ok you have the CI up and runnning and a first package version in the npm registry.")]),e._v(" "),a("p",[e._v("Now you can create the "),a("code",[e._v("develop")]),e._v(" branch in your remote repository. Don't forget to protect it and to set it to the default branch.")]),e._v(" "),a("p",[e._v("The master branch needs also to be protected.")]),e._v(" "),a("p",[e._v("You can add rules to the protected branches to force some checks when a PR occurs.\nAfter the first CI completed job you are able to force a CI status check to validate a PR.")]),e._v(" "),a("p",[e._v("You're done.")])])}),[],!1,null,null,null);t.default=s.exports}}]);
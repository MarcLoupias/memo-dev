(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{354:function(e,t,r){"use strict";r.r(t);var o=r(0),n=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),t("p",[e._v('The main important one, which is "devops compatible" : '),t("a",{attrs:{href:"https://guides.github.com/introduction/flow/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understanding the GitHub Flow"),t("OutboundLink")],1)]),e._v(" "),e._m(2),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[e._v("A successful Git branching model"),t("OutboundLink")],1),e._v(" ("),t("a",{attrs:{href:"http://nvie.com/img/git-model@2x.png",target:"_blank",rel:"noopener noreferrer"}},[e._v("diagram"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows",target:"_blank",rel:"noopener noreferrer"}},[e._v("differents workflow comparison"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://doc.gitlab.com/ee/workflow/gitlab_flow.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab workflow"),t("OutboundLink")],1),e._v(" (Continuous Delivery oriented)")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Feature-driven_development",target:"_blank",rel:"noopener noreferrer"}},[e._v("Feature driven development"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://stackoverflow.com/a/2850413",target:"_blank",rel:"noopener noreferrer"}},[e._v("merge fast-forward vs no-ff"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://developer.atlassian.com/blog/2014/12/pull-request-merge-strategies-the-great-debate/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pull Request Merge Strategies: The Great Debate"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://stackoverflow.com/questions/22199432/pull-request-vs-merge-request",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pull request versus Merge request"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.kernel.org/doc/html/v4.16/process/development-process.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("A guide to the Kernel Development Process"),t("OutboundLink")],1)])]),e._v(" "),e._m(3),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Centralized workflow"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Feature branch workflow"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gitflow workflow"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Forking workflow"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://endoflineblog.com/gitflow-considered-harmful",target:"_blank",rel:"noopener noreferrer"}},[e._v("Anti-Gitflow workflow"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://gist.github.com/djspiewak/9f2f91085607a4859a66",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git DMZ workflow"),t("OutboundLink")],1),e._v(" (Continuous Delivery oriented possible but not mandatory)")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://doc.gitlab.com/ee/workflow/gitlab_flow.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab workflow"),t("OutboundLink")],1),e._v(" (Continuous Delivery oriented)")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.nicoespeon.com/fr/2013/08/quel-git-workflow-pour-mon-projet/#le-github-flow",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub flow"),t("OutboundLink")],1),e._v(" (Continuous Delivery oriented) (best one, simple : A single branch, always deployable. Every dev is branched from this branch)")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://scottchacon.com/2011/08/31/github-flow.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub Flow - Article Original par Scott Chacon - 20110831"),t("OutboundLink")],1),e._v(" (Scott Chacon est l'auteur de "),t("a",{attrs:{href:"https://git-scm.com/book/fr/v2",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pro Git"),t("OutboundLink")],1),e._v(" et également employé chez GitHub.)")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://gist.github.com/seshness/3943237",target:"_blank",rel:"noopener noreferrer"}},[e._v("Shared repository workflow (same as GitHub flow)"),t("OutboundLink")],1),e._v(" (Continuous Delivery oriented)")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://blogs.atlassian.com/2014/01/simple-git-workflow-simple/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Simple Git flow"),t("OutboundLink")],1),e._v(" (Continuous Delivery oriented)")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://trunkbaseddevelopment.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Trunk based development"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.toptal.com/software/trunk-based-development-git-flow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Trunk-based Development vs. Git Flow - www.toptal.com - 201705xx"),t("OutboundLink")],1)])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.atlassian.com/blog/git/git-team-workflows-merge-or-rebase",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git team workflows: merge or rebase? - www.atlassian.com/blog - 20131028"),t("OutboundLink")],1)]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),t("p",[t("a",{attrs:{href:"https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to Contribute to an Open Source Project on GitHub"),t("OutboundLink")],1)]),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.developpez.net/forums/d1599839/general-developpement/alm/usine-logicielle/dilemne-worklow-git-integration-continue/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dilemne avec worklow Git et intégration continue - www.developpez.net/forums - 2016"),t("OutboundLink")],1)]),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),t("p",[e._v("Based on "),t("a",{attrs:{href:"https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("an email from Linus Torvalds"),t("OutboundLink")],1),e._v(" about merging strategy for linux dev.")]),e._v(" "),e._m(10),e._v(" "),t("p",[e._v("Goals : I want clean history, but that really means (a) clean and (b) history.")]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),t("p",[e._v("Based on "),t("a",{attrs:{href:"http://martinfowler.com/bliki/FeatureToggle.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Martin Fowler quotes"),t("OutboundLink")],1),e._v(" in "),t("a",{attrs:{href:"http://doc.gitlab.com/ee/workflow/gitlab_flow.html#do-not-order-commits-with-rebase",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab documentation"),t("OutboundLink")],1),e._v(".")]),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20)])}),[function(){var e=this._self._c;return e("h1",{attrs:{id:"git-workflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-workflow"}},[this._v("#")]),this._v(" Git - workflow")])},function(){var e=this._self._c;return e("h2",{attrs:{id:"differents-sources-for-brainstorming"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#differents-sources-for-brainstorming"}},[this._v("#")]),this._v(" differents sources for brainstorming")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"others-workflows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#others-workflows"}},[this._v("#")]),this._v(" others workflows")])},function(){var e=this._self._c;return e("h2",{attrs:{id:"git-workflow-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-workflow-list"}},[this._v("#")]),this._v(" Git workflow list")])},function(){var e=this,t=e._self._c;return t("blockquote",[t("p",[t("strong",[e._v("Rebase as cleanup:")])]),e._v(" "),t("ul",[t("li",[e._v("You’re developing locally.")]),e._v(" "),t("li",[e._v("Your code is ready for review.")]),e._v(" "),t("li",[e._v("Review is done and ready to be integrated into the target branch.")])]),e._v(" "),t("p",[t("strong",[e._v("Rebase team policy:")])]),e._v(" "),t("p",[t("em",[e._v("When a feature branch’s development is complete, rebase/squash all the work down to the minimum number of meaningful commits and avoid creating a merge commit")])]),e._v(" "),t("p",[e._v("Pros:")]),e._v(" "),t("ul",[t("li",[e._v("Code history remains flat and readable.")]),e._v(" "),t("li",[e._v("Manipulating a single commit is easy (e.g. reverting them).")])]),e._v(" "),t("p",[e._v("Cons:")]),e._v(" "),t("ul",[t("li",[e._v("Squashing can hide context")]),e._v(" "),t("li",[e._v("Rebasing doesn’t play well with pull requests")]),e._v(" "),t("li",[e._v("Rebasing can be dangerous!")]),e._v(" "),t("li",[e._v("It’s more work")]),e._v(" "),t("li",[e._v("you need to force push at some point")])]),e._v(" "),t("p",[t("strong",[e._v("Merge team policy:")])]),e._v(" "),t("p",[t("em",[e._v("When a feature branch is complete merge it to your target branch (master or develop or next).")])]),e._v(" "),t("p",[e._v("Pros:")]),e._v(" "),t("ul",[t("li",[e._v("Traceability")])]),e._v(" "),t("p",[e._v("Cons:")]),e._v(" "),t("ul",[t("li",[e._v("History can become intensely polluted by lots of merge commits")])])])},function(){var e=this._self._c;return e("h2",{attrs:{id:"opensource-contrib-on-github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#opensource-contrib-on-github"}},[this._v("#")]),this._v(" opensource contrib on GitHub")])},function(){var e=this,t=e._self._c;return t("blockquote",[t("ul",[t("li",[e._v("Introduction to GitHub 0:47")]),e._v(" "),t("li",[e._v("Exploring GitHub 1:47")]),e._v(" "),t("li",[e._v("Exploring a Repository 4:07")]),e._v(" "),t("li",[e._v("How to install Git SCM 2:15")]),e._v(" "),t("li",[e._v("How to authenticate with GitHub using SSH 3:34")]),e._v(" "),t("li",[e._v("Identifying How to Contribute to an Open Source Project on GitHub 2:15")]),e._v(" "),t("li",[e._v("How to Fork and Clone a GitHub Repository 2:41")]),e._v(" "),t("li",[e._v("Setting up the project locally 1:18")]),e._v(" "),t("li",[e._v("How to create a Pull Request on GitHub 6:19")]),e._v(" "),t("li",[e._v("How to Collaborate on a Pull Request on GitHub 2:21")]),e._v(" "),t("li",[e._v("How to update a Pull Request on GitHub 2:57")]),e._v(" "),t("li",[e._v("How to rebase a Git Pull Request branch 3:39")]),e._v(" "),t("li",[e._v("How to squash multiple Git commits 2:53")]),e._v(" "),t("li",[e._v("Getting a Pull Request Merged and Wrapping up 1:13")])])])},function(){var e=this._self._c;return e("h2",{attrs:{id:"merging-strategy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#merging-strategy"}},[this._v("#")]),this._v(" merging strategy")])},function(){var e=this._self._c;return e("p",[this._v("In a "),e("strong",[this._v("CI strategy")]),this._v(" you can merge in master at the start of the day to prevent painful merges at a later time.\nIn a "),e("strong",[this._v("synchronization point strategy")]),this._v(" you only merge in from well defined points in time, for example a tagged release.")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"synchronization-point-strategy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#synchronization-point-strategy"}},[this._v("#")]),this._v(" synchronization point strategy")])},function(){var e=this._self._c;return e("h4",{attrs:{id:"tldr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tldr"}},[this._v("#")]),this._v(" TLDR")])},function(){var e=this._self._c;return e("h5",{attrs:{id:"clean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clean"}},[this._v("#")]),this._v(" clean")])},function(){var e=this._self._c;return e("ul",[e("li",[this._v("People can (and probably should) rebase their "),e("em",[this._v("private")]),this._v(" trees (their own work). That's a "),e("em",[this._v("cleanup")]),this._v(".")]),this._v(" "),e("li",[this._v('But never other peoples code. That\'s a "destroy history".')])])},function(){var e=this._self._c;return e("h5",{attrs:{id:"history"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[this._v("#")]),this._v(" history")])},function(){var e=this,t=e._self._c;return t("ul",[t("li",[e._v("Keep your own history readable")]),e._v(" "),t("li",[e._v("Don't expose your crap.")]),e._v(" "),t("li",[e._v("Don't merge "),t("em",[e._v("upstream")]),e._v(" (ie : pull) code at random points.")]),e._v(" "),t("li",[e._v("Don't merge "),t("em",[e._v("downstream")]),e._v(" (ie : push) code at random points either.")])])},function(){var e=this._self._c;return e("h3",{attrs:{id:"continuous-integration-strategy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#continuous-integration-strategy"}},[this._v("#")]),this._v(" Continuous Integration strategy")])},function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("If your feature branches commonly take more than a day of work, look into ways to create smaller units of work and/or use feature toggles.")])])},function(){var e=this._self._c;return e("h4",{attrs:{id:"pros"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pros"}},[this._v("#")]),this._v(" pros")])},function(){var e=this,t=e._self._c;return t("ul",[t("li",[e._v("merge your work every day")]),e._v(" "),t("li",[e._v("pull others work every day")]),e._v(" "),t("li",[e._v("CI oriented")]),e._v(" "),t("li",[e._v("painless merge")]),e._v(" "),t("li",[e._v("easier for devs to handle")])])},function(){var e=this._self._c;return e("h5",{attrs:{id:"cons"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cons"}},[this._v("#")]),this._v(" cons")])},function(){var e=this._self._c;return e("ul",[e("li",[this._v("feature flipping is mandatory to be able to deliver a clean product")]),this._v(" "),e("li",[this._v("more difficult for dev to handle")])])}],!1,null,null,null);t.default=n.exports}}]);
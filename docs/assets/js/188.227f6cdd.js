(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{543:function(e,t,r){"use strict";r.r(t);var o=r(45),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"git-workflow"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-workflow"}},[e._v("#")]),e._v(" Git - workflow")]),e._v(" "),r("h2",{attrs:{id:"differents-sources-for-brainstorming"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#differents-sources-for-brainstorming"}},[e._v("#")]),e._v(" differents sources for brainstorming")]),e._v(" "),r("p",[e._v('The main important one, which is "devops compatible" : '),r("a",{attrs:{href:"https://guides.github.com/introduction/flow/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understanding the GitHub Flow"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"others-workflows"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#others-workflows"}},[e._v("#")]),e._v(" others workflows")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[e._v("A successful Git branching model"),r("OutboundLink")],1),e._v(" ("),r("a",{attrs:{href:"http://nvie.com/img/git-model@2x.png",target:"_blank",rel:"noopener noreferrer"}},[e._v("diagram"),r("OutboundLink")],1),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows",target:"_blank",rel:"noopener noreferrer"}},[e._v("differents workflow comparison"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://doc.gitlab.com/ee/workflow/gitlab_flow.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab workflow"),r("OutboundLink")],1),e._v(" (Continuous Delivery oriented)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Feature-driven_development",target:"_blank",rel:"noopener noreferrer"}},[e._v("Feature driven development"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://stackoverflow.com/a/2850413",target:"_blank",rel:"noopener noreferrer"}},[e._v("merge fast-forward vs no-ff"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developer.atlassian.com/blog/2014/12/pull-request-merge-strategies-the-great-debate/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pull Request Merge Strategies: The Great Debate"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://stackoverflow.com/questions/22199432/pull-request-vs-merge-request",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pull request versus Merge request"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.kernel.org/doc/html/v4.16/process/development-process.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("A guide to the Kernel Development Process"),r("OutboundLink")],1)])]),e._v(" "),r("h2",{attrs:{id:"git-workflow-list"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-workflow-list"}},[e._v("#")]),e._v(" Git workflow list")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Centralized workflow"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Feature branch workflow"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gitflow workflow"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Forking workflow"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://endoflineblog.com/gitflow-considered-harmful",target:"_blank",rel:"noopener noreferrer"}},[e._v("Anti-Gitflow workflow"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://gist.github.com/djspiewak/9f2f91085607a4859a66",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git DMZ workflow"),r("OutboundLink")],1),e._v(" (Continuous Delivery oriented possible but not mandatory)")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://doc.gitlab.com/ee/workflow/gitlab_flow.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab workflow"),r("OutboundLink")],1),e._v(" (Continuous Delivery oriented)")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://www.nicoespeon.com/fr/2013/08/quel-git-workflow-pour-mon-projet/#le-github-flow",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub flow"),r("OutboundLink")],1),e._v(" (Continuous Delivery oriented) (best one, simple : A single branch, always deployable. Every dev is branched from this branch)")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://scottchacon.com/2011/08/31/github-flow.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub Flow - Article Original par Scott Chacon - 20110831"),r("OutboundLink")],1),e._v(" (Scott Chacon est l'auteur de "),r("a",{attrs:{href:"https://git-scm.com/book/fr/v2",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pro Git"),r("OutboundLink")],1),e._v(" et également employé chez GitHub.)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://gist.github.com/seshness/3943237",target:"_blank",rel:"noopener noreferrer"}},[e._v("Shared repository workflow (same as GitHub flow)"),r("OutboundLink")],1),e._v(" (Continuous Delivery oriented)")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://blogs.atlassian.com/2014/01/simple-git-workflow-simple/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Simple Git flow"),r("OutboundLink")],1),e._v(" (Continuous Delivery oriented)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://trunkbaseddevelopment.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Trunk based development"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.toptal.com/software/trunk-based-development-git-flow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Trunk-based Development vs. Git Flow - www.toptal.com - 201705xx"),r("OutboundLink")],1)])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.atlassian.com/blog/git/git-team-workflows-merge-or-rebase",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git team workflows: merge or rebase? - www.atlassian.com/blog - 20131028"),r("OutboundLink")],1)]),e._v(" "),r("blockquote",[r("p",[r("strong",[e._v("Rebase as cleanup:")])]),e._v(" "),r("ul",[r("li",[e._v("You’re developing locally.")]),e._v(" "),r("li",[e._v("Your code is ready for review.")]),e._v(" "),r("li",[e._v("Review is done and ready to be integrated into the target branch.")])]),e._v(" "),r("p",[r("strong",[e._v("Rebase team policy:")])]),e._v(" "),r("p",[r("em",[e._v("When a feature branch’s development is complete, rebase/squash all the work down to the minimum number of meaningful commits and avoid creating a merge commit")])]),e._v(" "),r("p",[e._v("Pros:")]),e._v(" "),r("ul",[r("li",[e._v("Code history remains flat and readable.")]),e._v(" "),r("li",[e._v("Manipulating a single commit is easy (e.g. reverting them).")])]),e._v(" "),r("p",[e._v("Cons:")]),e._v(" "),r("ul",[r("li",[e._v("Squashing can hide context")]),e._v(" "),r("li",[e._v("Rebasing doesn’t play well with pull requests")]),e._v(" "),r("li",[e._v("Rebasing can be dangerous!")]),e._v(" "),r("li",[e._v("It’s more work")]),e._v(" "),r("li",[e._v("you need to force push at some point")])]),e._v(" "),r("p",[r("strong",[e._v("Merge team policy:")])]),e._v(" "),r("p",[r("em",[e._v("When a feature branch is complete merge it to your target branch (master or develop or next).")])]),e._v(" "),r("p",[e._v("Pros:")]),e._v(" "),r("ul",[r("li",[e._v("Traceability")])]),e._v(" "),r("p",[e._v("Cons:")]),e._v(" "),r("ul",[r("li",[e._v("History can become intensely polluted by lots of merge commits")])])]),e._v(" "),r("h2",{attrs:{id:"opensource-contrib-on-github"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#opensource-contrib-on-github"}},[e._v("#")]),e._v(" opensource contrib on GitHub")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to Contribute to an Open Source Project on GitHub"),r("OutboundLink")],1)]),e._v(" "),r("blockquote",[r("ul",[r("li",[e._v("Introduction to GitHub 0:47")]),e._v(" "),r("li",[e._v("Exploring GitHub 1:47")]),e._v(" "),r("li",[e._v("Exploring a Repository 4:07")]),e._v(" "),r("li",[e._v("How to install Git SCM 2:15")]),e._v(" "),r("li",[e._v("How to authenticate with GitHub using SSH 3:34")]),e._v(" "),r("li",[e._v("Identifying How to Contribute to an Open Source Project on GitHub 2:15")]),e._v(" "),r("li",[e._v("How to Fork and Clone a GitHub Repository 2:41")]),e._v(" "),r("li",[e._v("Setting up the project locally 1:18")]),e._v(" "),r("li",[e._v("How to create a Pull Request on GitHub 6:19")]),e._v(" "),r("li",[e._v("How to Collaborate on a Pull Request on GitHub 2:21")]),e._v(" "),r("li",[e._v("How to update a Pull Request on GitHub 2:57")]),e._v(" "),r("li",[e._v("How to rebase a Git Pull Request branch 3:39")]),e._v(" "),r("li",[e._v("How to squash multiple Git commits 2:53")]),e._v(" "),r("li",[e._v("Getting a Pull Request Merged and Wrapping up 1:13")])])]),e._v(" "),r("h2",{attrs:{id:"merging-strategy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#merging-strategy"}},[e._v("#")]),e._v(" merging strategy")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.developpez.net/forums/d1599839/general-developpement/alm/usine-logicielle/dilemne-worklow-git-integration-continue/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dilemne avec worklow Git et intégration continue - www.developpez.net/forums - 2016"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("In a "),r("strong",[e._v("CI strategy")]),e._v(" you can merge in master at the start of the day to prevent painful merges at a later time.\nIn a "),r("strong",[e._v("synchronization point strategy")]),e._v(" you only merge in from well defined points in time, for example a tagged release.")]),e._v(" "),r("h3",{attrs:{id:"synchronization-point-strategy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#synchronization-point-strategy"}},[e._v("#")]),e._v(" synchronization point strategy")]),e._v(" "),r("p",[e._v("Based on "),r("a",{attrs:{href:"https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("an email from Linus Torvalds"),r("OutboundLink")],1),e._v(" about merging strategy for linux dev.")]),e._v(" "),r("h4",{attrs:{id:"tldr"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tldr"}},[e._v("#")]),e._v(" TLDR")]),e._v(" "),r("p",[e._v("Goals : I want clean history, but that really means (a) clean and (b) history.")]),e._v(" "),r("h5",{attrs:{id:"clean"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#clean"}},[e._v("#")]),e._v(" clean")]),e._v(" "),r("ul",[r("li",[e._v("People can (and probably should) rebase their "),r("em",[e._v("private")]),e._v(" trees (their own work). That's a "),r("em",[e._v("cleanup")]),e._v(".")]),e._v(" "),r("li",[e._v('But never other peoples code. That\'s a "destroy history".')])]),e._v(" "),r("h5",{attrs:{id:"history"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[e._v("#")]),e._v(" history")]),e._v(" "),r("ul",[r("li",[e._v("Keep your own history readable")]),e._v(" "),r("li",[e._v("Don't expose your crap.")]),e._v(" "),r("li",[e._v("Don't merge "),r("em",[e._v("upstream")]),e._v(" (ie : pull) code at random points.")]),e._v(" "),r("li",[e._v("Don't merge "),r("em",[e._v("downstream")]),e._v(" (ie : push) code at random points either.")])]),e._v(" "),r("h3",{attrs:{id:"continuous-integration-strategy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#continuous-integration-strategy"}},[e._v("#")]),e._v(" Continuous Integration strategy")]),e._v(" "),r("p",[e._v("Based on "),r("a",{attrs:{href:"http://martinfowler.com/bliki/FeatureToggle.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Martin Fowler quotes"),r("OutboundLink")],1),e._v(" in "),r("a",{attrs:{href:"http://doc.gitlab.com/ee/workflow/gitlab_flow.html#do-not-order-commits-with-rebase",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab documentation"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("blockquote",[r("p",[e._v("If your feature branches commonly take more than a day of work, look into ways to create smaller units of work and/or use feature toggles.")])]),e._v(" "),r("h4",{attrs:{id:"pros"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pros"}},[e._v("#")]),e._v(" pros")]),e._v(" "),r("ul",[r("li",[e._v("merge your work every day")]),e._v(" "),r("li",[e._v("pull others work every day")]),e._v(" "),r("li",[e._v("CI oriented")]),e._v(" "),r("li",[e._v("painless merge")]),e._v(" "),r("li",[e._v("easier for devs to handle")])]),e._v(" "),r("h5",{attrs:{id:"cons"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cons"}},[e._v("#")]),e._v(" cons")]),e._v(" "),r("ul",[r("li",[e._v("feature flipping is mandatory to be able to deliver a clean product")]),e._v(" "),r("li",[e._v("more difficult for dev to handle")])])])}),[],!1,null,null,null);t.default=a.exports}}]);
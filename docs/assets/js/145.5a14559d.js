(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{313:function(t,e,n){"use strict";n.r(e);var a=n(0),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),e("p",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Imperative_programming",target:"_blank",rel:"noopener noreferrer"}},[t._v("Imperative programming"),e("OutboundLink")],1)]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),e("p",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Declarative_programming",target:"_blank",rel:"noopener noreferrer"}},[t._v("Declarative programming"),e("OutboundLink")],1)]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),e("p",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Structured_programming",target:"_blank",rel:"noopener noreferrer"}},[t._v("Structured programming"),e("OutboundLink")],1)]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),e("p",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Functional_programming",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional programming : en.wikipedia.org"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://wiki.haskell.org/Functional_programming",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional programming : wiki.haskell.org"),e("OutboundLink")],1)]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),e("p",[t._v("No assignment means var are immutables.")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),e("p",[t._v("N.B.2. :")]),t._v(" "),t._m(13),t._v(" "),e("p",[t._v("cf "),e("a",{attrs:{href:"https://medium.com/javascript-scene/nested-ternaries-are-great-361bddd0f340",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nested Ternaries are Great - Eric Elliott - 20180126"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/MostlyAdequate/mostly-adequate-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mostly adequate guide to FP (in JavaScript)"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://drboolean.gitbooks.io/mostly-adequate-guide/content/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitbook"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=e-5obm1G_FY",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learning Functional Programming with JavaScript - JSUnconf 2016 : Anjana Vakil"),e("OutboundLink")],1),t._v(" - "),e("a",{attrs:{href:"https://slidr.io/vakila/learning-functional-programming-with-javascript#1",target:"_blank",rel:"noopener noreferrer"}},[t._v("slides"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://2017.jsconf.eu/speakers/anjana-vakil-immutable-data-structures-for-functional-js.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Immutable data structures for functional JS : Anjana Vakil"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://hughfdjackson.com/javascript/why-curry-helps/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why Curry Helps - hughfdjackson.com (2015 ?)"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://fr.umio.us/favoring-curry/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Favoring Curry - Scott Sauyet - 20140618"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming",target:"_blank",rel:"noopener noreferrer"}},[t._v("An introduction to functional programming : Mary Rose Cook"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://twitter.com/mfeathers/status/29581296216?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E29581296216&ref_url=https%3A%2F%2Fmedium.com%2Fmedia%2F95da9b980e9c6f99b6613f490c4f636a%3FpostId%3D7325853ff9ad",target:"_blank",rel:"noopener noreferrer"}},[t._v("Michael Feathers tweet - 20101103"),e("OutboundLink")],1)]),t._v(" "),t._m(14),t._v(" "),e("p",[e("a",{attrs:{href:"https://medium.com/making-internets/a-bird-s-eye-view-of-functional-programming-7325853ff9ad",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Birds Eye View of Functional Programming TL;DR - medium.com - Brooklyn Zelenka - 20151030"),e("OutboundLink")],1)]),t._v(" "),t._m(15),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4",target:"_blank",rel:"noopener noreferrer"}},[t._v("Robert C Martin - Functional Programming; What? Why? When?"),e("OutboundLink")],1)]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=247s",target:"_blank",rel:"noopener noreferrer"}},[t._v("4:07"),e("OutboundLink")],1),t._v(' "Functional Programming: What? When? Why?" or "The Failure of State"')]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=310s",target:"_blank",rel:"noopener noreferrer"}},[t._v("5:10"),e("OutboundLink")],1),t._v(" Rich Hickey is the author of Clojure. Listen to his talks.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=340s",target:"_blank",rel:"noopener noreferrer"}},[t._v("5:40"),e("OutboundLink")],1),t._v(" What is state? Variables.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=675s",target:"_blank",rel:"noopener noreferrer"}},[t._v("11:15"),e("OutboundLink")],1),t._v(" Structure and Interpretation of Computer Programs. This is a fascinating book. For the first 250 pages, the book uses no assignment statements.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=855s",target:"_blank",rel:"noopener noreferrer"}},[t._v("14:15"),e("OutboundLink")],1),t._v(" Here's how SICP's model of computing worked before they introduced an assignment statement. Simply replace a function call with its implementation.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=958s",target:"_blank",rel:"noopener noreferrer"}},[t._v("15:58"),e("OutboundLink")],1),t._v(" Once you introduce assignment. You can no longer replace a function call with its implementation. Why? Because the state of the system may have changed. An assignment statement introduces the concept of time.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=1084s",target:"_blank",rel:"noopener noreferrer"}},[t._v("18:04"),e("OutboundLink")],1),t._v(" Side effect: an assignment statement. If there's no assignment, there's no side effect.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=1222s",target:"_blank",rel:"noopener noreferrer"}},[t._v("20:22"),e("OutboundLink")],1),t._v(' What "hack" have we done to protect us from memory leaks? Garbage collection.')]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=1906s",target:"_blank",rel:"noopener noreferrer"}},[t._v("31:46"),e("OutboundLink")],1),t._v(" Functional programming was invented in 1957 before OO and structured. But memory was too expensive to make it practical. But memory is cheap now.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=1973s",target:"_blank",rel:"noopener noreferrer"}},[t._v("32:53"),e("OutboundLink")],1),t._v(" Should we change how we program? We should because:\n"),t._m(16)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=2318s",target:"_blank",rel:"noopener noreferrer"}},[t._v("38:38"),e("OutboundLink")],1),t._v(" We're using multicore CPU's now because we can't increase clock rate anymore. And hardware makers are doing bizarre tradeoffs. They're making individual processors slower but putting more processors in. So individual cores slow down but the chip throughput goes up if you can take advantage of all the cores.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=2520s",target:"_blank",rel:"noopener noreferrer"}},[t._v("42:00"),e("OutboundLink")],1),t._v(" How are you going to work with an abundance of cores? Maybe we need to walk away from the assignment statement.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=7Zlp9rKHGD4&t=2989s",target:"_blank",rel:"noopener noreferrer"}},[t._v("49:49"),e("OutboundLink")],1),t._v(" OO = procedure + state. OO is exposed procedure but hidden state (encapsulation). It's possible to write functional programs using an OO style. All of the objects become immutable.")])]),t._v(" "),t._m(17),t._v(" "),e("p",[e("a",{attrs:{href:"https://medium.com/making-internets/why-using-chain-is-a-mistake-9bc1f80d51ba",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why using "),e("code",[t._v("_.chain")]),t._v(" is a mistake. - medium.com - Izaak Schroeder - 20160217"),e("OutboundLink")],1)]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._m(24),t._v(" "),e("p",[t._v("A composed version of:")]),t._v(" "),t._m(25),e("p",[t._v("Could be written with more visual clarity using composition:")]),t._v(" "),t._m(26),e("p",[t._v("Note : Since "),e("a",{attrs:{href:"https://github.com/lodash/lodash/wiki/Changelog#v400",target:"_blank",rel:"noopener noreferrer"}},[t._v("lodash@4"),e("OutboundLink")],1),t._v(" "),e("code",[t._v("_.compose")]),t._v(" has been removed in flavor of "),e("a",{attrs:{href:"https://lodash.com/docs/4.17.10#flowRight",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("_.flowRight")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(27),t._v(" "),e("p",[e("a",{attrs:{href:"https://fsharpforfunandprofit.com/posts/dependency-injection-1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional approaches to dependency injection 20161205"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("TLDR : Build functions with partial application at the root level of your app ("),e("a",{attrs:{href:"https://github.com/mpj/ffforumautomator/tree/f9c5aa658103532bfb9c5e4f64ab0391e50d06a8",target:"_blank",rel:"noopener noreferrer"}},[t._v("here is a concrete example"),e("OutboundLink")],1),t._v(")")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=sD94szvFqGw&feature=youtu.be",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dependency Injection without classes - Fun Fun Function - www.youtube.com - 20170904"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=6YBV1cKRqzU&feature=youtu.be",target:"_blank",rel:"noopener noreferrer"}},[t._v("Advanced Dependency Injection without classes - Fun Fun Function - www.youtube.com - 20170911"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://softwareengineering.stackexchange.com/questions/275891/is-functional-programming-a-viable-alternative-to-dependency-injection-patterns",target:"_blank",rel:"noopener noreferrer"}},[t._v("Is Functional Programming a viable alternative to dependency injection patterns? : stackexchange.com 20150310"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"http://mikehadlow.blogspot.fr/2010/03/functional-dependency-injection.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional Dependency Injection == Currying 201003xx"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://medium.com/easy-pieces-for-programmers/how-to-trick-oo-programmers-into-loving-functional-programming-7019e1bf9bba",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to Trick OO Programmers into Loving Functional Programming 20130603"),e("OutboundLink")],1)]),t._v(" "),t._m(28),t._v(" "),e("p",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Object-oriented_programming",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object-oriented programming"),e("OutboundLink")],1)]),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),e("p",[e("a",{attrs:{href:"https://softwareengineering.stackexchange.com/a/9769",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional Programming vs. OOP [closed] : softwareengineering.stackexchange.com 20101005"),e("OutboundLink")],1)]),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),e("p",[e("a",{attrs:{href:"https://stackoverflow.com/a/2079678",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional programming vs Object Oriented programming [closed] : stackoverflow.com 20100116"),e("OutboundLink")],1)]),t._v(" "),t._m(33),t._v(" "),e("p",[t._v("TDLR : If logic evolves more then the model : choose FP and if model evolves more then the logic : choose OOP")]),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),e("p",[t._v("When evolution goes the wrong way, you have problems ("),e("a",{attrs:{href:"http://www.daimi.au.dk/~madst/tool/papers/expression.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Expression Problem : Philip Wadler 19981112"),e("OutboundLink")],1),t._v("):")]),t._v(" "),e("p",[t._v("Adding a new operation to an OOP program may require editing many class definitions to add a new method.")]),t._v(" "),e("p",[t._v("Adding a new kind of thing to a FP program may require editing many function definitions to add a new case.")]),t._v(" "),t._m(36),t._v(" "),e("p",[t._v("Functional languages excel at manipulating symbolic data in tree form.")])])}),[function(){var t=this._self._c;return t("h1",{attrs:{id:"paradigms"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#paradigms"}},[this._v("#")]),this._v(" paradigms")])},function(){var t=this._self._c;return t("h2",{attrs:{id:"imperative-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#imperative-programming"}},[this._v("#")]),this._v(" imperative programming")])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("In computer science, imperative programming is a programming paradigm that uses statements that change a program's state.")]),this._v(" "),t("p",[this._v("Imperative programming focuses on describing how a program operates.")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"declarative-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#declarative-programming"}},[this._v("#")]),this._v(" declarative programming")])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("is a programming paradigm [...] that expresses the logic of a computation without describing its control flow.")]),this._v(" "),t("p",[this._v("Many languages that apply this style attempt to minimize or eliminate side effects by describing what the program must accomplish in terms of the problem domain, rather than describe how to accomplish it as a sequence of the programming language primitives (the how being left up to the language's implementation). This is in contrast with imperative programming, which implements algorithms in explicit steps.")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"structured-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#structured-programming"}},[this._v("#")]),this._v(" structured programming")])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("don't use unrestrained GOTO (Robert C. Martin)")]),this._v(" "),t("p",[this._v('aimed at improving the clarity, quality, and development time of a computer program by making extensive use of subroutines, block structures, for and while loops—in contrast to using simple tests and jumps such as the go to statement which could lead to "spaghetti code" causing difficulty to both follow and maintain.')])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"functional-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functional-programming"}},[this._v("#")]),this._v(" functional programming")])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("Functional programming is a style of programming which models computations as the evaluation of expressions.\nThis article is meant to describe it briefly;\nhowever, the best way to understand functional programming is to learn the basics of one of the functional programming languages")])])},function(){var t=this._self._c;return t("p",[this._v("Very quick "),t("strong",[this._v("TLDR")]),this._v(" : "),t("strong",[this._v("avoids shared state & mutable data")]),this._v(", "),t("strong",[this._v("functions always returns a value")]),this._v(" & a function with given args will always returns the same value.")])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("don't use assignment (Robert C. Martin)")])])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements.")])])},function(){var t=this,e=t._self._c;return e("p",[t._v("N.B. : An "),e("strong",[t._v("expression")]),t._v(" is not a "),e("strong",[t._v("statement")]),t._v(" but a valid unit of code that "),e("em",[t._v("resolves to a value")]),t._v(". Not all "),e("strong",[t._v("statements")]),t._v(" resolve to a value.")])},function(){var t=this._self._c;return t("ul",[t("li",[t("em",[this._v("An expression is a chunk of code that evaluates to a single value.")])]),this._v(" "),t("li",[t("em",[this._v("A statement is a chunk of code that may not evaluate to a value at all.")])])])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("OO makes code understandable by encapsulating moving parts.\nFP makes code understandable by minimizing moving parts.")])])},function(){var t=this,e=t._self._c;return e("blockquote",[e("p",[t._v("Functional programming (FP) helps you write robust, powerful, and maintainable programs well suited to multicore and cloud computing by focusing on controlling state and effects.")]),t._v(" "),e("p",[e("strong",[t._v("Functional Programming Principles")])]),t._v(" "),e("p",[e("em",[t._v("Own Your Context with Explicit State")]),t._v("\nSome people call it “stateless”, but I prefer “explicit state”. Instead of having data implicitly “somewhere over there” and reading that (implicit & shared) data while in the body of a function, simply pass all data that the function needs explicitly as arguments.")]),t._v(" "),e("p",[e("em",[t._v("Limit Side Effects")]),t._v("\nThis is the output side of explicit state. As much as possible, avoid talking to the world outside of the function, except for the final return of the function.")]),t._v(" "),e("p",[e("em",[t._v("Referential Transparency")]),t._v("\nWhen you limit yourself to simple input/output for every function (with no changes to the world outside it), you can swap out a function for its return value.")]),t._v(" "),e("p",[e("em",[t._v("Composition")]),t._v("\nWith (top-down) inheritance, you specialize a general class into more specific subsets. For example, a general Car class can be used to make more specific SportsCar and Minivan classes. This works well for a certain problems, but fails when you want to mix and match functionality. You can quickly end up with an endless regress of more and more general classes, and huge messaging interfaces between different parts of your application.\nWith (bottom-up) function composition, we take small, single responsibility functions, and combine them with other functions to build up larger, more complex behaviours. We do this either by passing the result of one function as the argument of another, or by calling them in sequence (if we’re side-effecting).")])])},function(){var t=this._self._c;return t("ol",[t("li",[this._v("Functional programs are simpler - which makes them easier to write and maintain")]),this._v(" "),t("li",[this._v("There's no temporal coupling - no worrying if some function was called before another function.")]),this._v(" "),t("li",[this._v("Fewer concurrency issues. In a purely functional program, there's no concurrency because there is no state.")]),this._v(" "),t("li",[this._v('No asking, "What\'s the state?"')])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"functionnal-programming-concepts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functionnal-programming-concepts"}},[this._v("#")]),this._v(" functionnal programming concepts")])},function(){var t=this._self._c;return t("h4",{attrs:{id:"partial-application"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#partial-application"}},[this._v("#")]),this._v(" partial application")])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("Partial application means taking a function with n arguments and returning a new function with n-i arguments (given i<n), where the i arguments are bound to the new function.")])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" add5 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("partial")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// now `a` is bound (locked-in) to 5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add5")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this is what it looks like inside")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equivalent to invoking add(5, 3);")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])])},function(){var t=this._self._c;return t("h4",{attrs:{id:"currying"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#currying"}},[this._v("#")]),this._v(" currying")])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("Function currying is the process of successive partial applications, until the last argument is given at which point the result of the function is returned.")])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Repeated partial application.")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])])},function(){var t=this._self._c;return t("h4",{attrs:{id:"composition"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#composition"}},[this._v("#")]),this._v(" Composition")])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add8")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" add8 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("compose")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" add3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"functionnal-programming-and-di"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functionnal-programming-and-di"}},[this._v("#")]),this._v(" functionnal programming and DI")])},function(){var t=this._self._c;return t("h2",{attrs:{id:"object-oriented-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-oriented-programming"}},[this._v("#")]),this._v(" object-oriented programming")])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("don't use pointers to functions (Robert C. Martin) (He is talking about pointers in C++)")]),this._v(" "),t("p",[this._v('based on the concept of "objects", which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. A feature of objects is that an object\'s procedures can access and often modify the data fields of the object with which they are associated (objects have a notion of "this" or "self"). In OOP, computer programs are designed by making them out of objects that interact with one another.')])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"imperative-programming-versus-functionnal-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#imperative-programming-versus-functionnal-programming"}},[this._v("#")]),this._v(" imperative programming versus functionnal programming")])},function(){var t=this,e=t._self._c;return e("blockquote",[e("p",[t._v("TLDR : "),e("strong",[t._v("imperative")]),t._v(" versus "),e("strong",[t._v("functional")]),t._v(" === "),e("strong",[t._v("control flow")]),t._v(" versus "),e("strong",[t._v("data flow")])]),t._v(" "),e("p",[t._v("For example, in imperative programming variables and loops are common when handling state, while in functional\nprogramming the state is handled via parameter passing, which avoids side-effects and assignments.")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"object-oriented-programming-versus-functionnal-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-oriented-programming-versus-functionnal-programming"}},[this._v("#")]),this._v(" object oriented programming versus functionnal programming")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("When do you choose functional programming over object oriented?")])])},function(){var t=this,e=t._self._c;return e("p",[t._v("OOP is good when you have a fixed set of "),e("em",[t._v("operations")]),t._v(" on "),e("em",[t._v("things")]),t._v(".\nYour code evolves, you primarily add new "),e("em",[t._v("things")]),t._v(". Adding new classes which implement existing methods ("),e("em",[t._v("operations")]),t._v(").")])},function(){var t=this._self._c;return t("p",[this._v("FP is good when you have a fixed set of "),t("em",[this._v("things")]),this._v("\nYour code evolves, you primarily add new "),t("em",[this._v("operations")]),this._v(" (functions) on existing "),t("em",[this._v("things")]),this._v(" (data types).")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("What are the typical problem definitions where functional programming is a better choice?")])])}],!1,null,null,null);e.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{389:function(e,t,s){"use strict";s.r(t);var n=s(0),a=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("div",{staticClass:"content"},[e._m(0),e._v(" "),t("p",[e._v("By release workflow, i mean all the tasks starting to the commit to be published (excluding Work In Progress, aka WIP commits, to be squashed).")]),e._v(" "),t("p",[e._v("The tasks are :")]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),t("p",[e._v("They can be executed on the developer computer or/and in the CI pipeline.")]),e._v(" "),t("p",[e._v("The release workflow is highly coupled the Git workflow, anyway this is another matter.")]),e._v(" "),t("p",[e._v("We could resume the release workflow this way :")]),e._v(" "),e._m(3),e._m(4),e._v(" "),t("p",[e._v("Theses tools are based on Git, a common commits messages convention, the semver specification and obviously npm.")]),e._v(" "),e._m(5),e._v(" "),t("p",[e._v("The famous "),t("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Source Control Manager"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Manage the codebase contained in a repository.")]),e._v(" "),e._m(6),e._v(" "),t("p",[e._v("Popularized by AngularJS team. Can be "),t("a",{attrs:{href:"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines",target:"_blank",rel:"noopener noreferrer"}},[e._v("found here"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Each codebase revision is hold in a commit. Each commit contain a commit message.")]),e._v(" "),t("p",[e._v("Commit message standardization leads to :")]),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),t("p",[e._v("Popularized by npm to manage the version system.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dedicated website semver.org"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("It is about how to structure a version number and for what meaning.")]),e._v(" "),e._m(9),e._v(" "),t("p",[e._v("The "),t("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("node package manager"),t("OutboundLink")],1),e._v(".")]),e._v(" "),e._m(10),e._v(" "),t("p",[e._v("The following npm CLI commands are especially involved :")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.npmjs.com/cli/version.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("npm version")]),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.npmjs.com/cli/pack.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("npm pack")]),t("OutboundLink")],1)])]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),t("p",[t("a",{attrs:{href:"https://hackernoon.com/these-6-essential-tools-will-maintain-your-npm-modules-for-you-4cbbee88e0cb",target:"_blank",rel:"noopener noreferrer"}},[e._v("These 6 essential tools will release, version, and maintain your NPM modules for you - hackernoon.com - 20180425"),t("OutboundLink")],1)]),e._v(" "),e._m(13),e._v(" "),t("p",[t("a",{attrs:{href:"https://michaljanaszek.com/blog/lerna-conventional-commits",target:"_blank",rel:"noopener noreferrer"}},[e._v("Semantic Release with Lerna and Conventional Commits - michaljanaszek.com/blog - 20180616"),t("OutboundLink")],1)]),e._v(" "),e._m(14),e._v(" "),t("p",[t("a",{attrs:{href:"https://samhogy.co.uk/2018/08/lerna-independent-mode-with-semver.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lerna Independent Mode with Semver - samhogy.co.uk - 20180816"),t("OutboundLink")],1)]),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("lerna/lerna")]),e._v(" - "),t("code",[e._v("github.com")]),t("OutboundLink")],1),e._v(" / "),t("a",{attrs:{href:"https://lernajs.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("lernajs.io"),t("OutboundLink")],1)]),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),t("p",[e._v("WARNING : lerna used with semantic-release is not mature at all. See "),t("a",{attrs:{href:"https://github.com/semantic-release/semantic-release/issues/193",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue on semantic-release repo"),t("OutboundLink")],1),e._v(".")]),e._v(" "),e._m(23),e._v(" "),t("p",[t("a",{attrs:{href:"https://greenkeeper.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("greenkeeper.io"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://github.com/greenkeeperio",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("greenkeeperio")]),e._v(" - "),t("code",[e._v("github.com")]),t("OutboundLink")],1)]),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.conventionalcommits.org/en/v1.0.0-beta.3/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Conventional Commits"),t("OutboundLink")],1)]),e._v(" "),e._m(26),e._v(" "),t("p",[e._v("Commit message structure :")]),e._v(" "),e._m(27),t("p",[t("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("conventional-changelog/commitlint")]),e._v(" - "),t("code",[e._v("github.com")]),t("OutboundLink")],1)]),e._v(" "),e._m(28),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("commitizen/cz-cli")]),e._v(" - "),t("code",[e._v("github.com")]),t("OutboundLink")],1)]),e._v(" "),e._m(29),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/commitizen/cz-conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("commitizen/cz-conventional-changelog")]),e._v(" - "),t("code",[e._v("github.com")]),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("A commitizen adapter for the angular preset of "),t("a",{attrs:{href:"https://github.com/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[e._v("conventional-changelog"),t("OutboundLink")],1),e._v(".")])]),e._v(" "),e._m(30),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.npmtrends.com/standard-version-vs-semantic-release-vs-conventional-changelog-vs-generate-changelog-vs-@semantic-release/github-vs-@semantic-release/release-notes-generator-vs-@semantic-release/npm",target:"_blank",rel:"noopener noreferrer"}},[e._v("npmtrends.com comparison"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("2 years time range give a better view :")]),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/lob/generate-changelog",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("lob/generate-changelog")]),e._v(" - "),t("code",[e._v("github.com")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("The simpler one.")]),e._v(" "),e._m(33),e._v(" "),t("p",[e._v("Recommendations available for the tag and push tasks.")]),e._v(" "),e._m(34),e._v(" "),e._m(35),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("conventional-changelog")]),e._v(" - "),t("code",[e._v("github.com")]),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"}},[e._v("standard-version"),t("OutboundLink")],1),e._v(" is the high level entry point repo.")]),e._v(" "),e._m(36),e._v(" "),t("ol",[t("li",[e._v("bumps the version in metadata files (package.json, composer.json, etc).")]),e._v(" "),t("li",[e._v("uses "),t("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[e._v("conventional-changelog"),t("OutboundLink")],1),e._v(" to update "),t("em",[e._v("CHANGELOG.md")])]),e._v(" "),e._m(37),e._v(" "),t("li",[e._v("tags a new release")])]),e._v(" "),e._m(38),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/conventional-changelog/releaser-tools",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("releaser-tools")]),e._v(" - "),t("code",[e._v("github.com/conventional-changelog")]),t("OutboundLink")],1)]),e._v(" "),e._m(39),e._v(" "),e._m(40),e._v(" "),t("p",[e._v("Executed by a CI job.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/semantic-release",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("semantic-release")]),e._v(" - "),t("code",[e._v("github.com")]),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://semantic-release.gitbook.io/semantic-release/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("semantic-release")]),e._v(" - "),t("code",[e._v("semantic-release.gitbook.io")]),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[e._m(41),e._v(" "),t("p",[e._v("This removes the immediate connection between human emotions and version numbers, strictly following the "),t("a",{attrs:{href:"http://semver.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Semantic Versioning"),t("OutboundLink")],1),e._v(" specification.")])]),e._v(" "),e._m(42),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version/issues/3",target:"_blank",rel:"noopener noreferrer"}},[e._v("explain the relationship to semantic-release - "),t("code",[e._v("github.com/conventional-changelog")]),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version/issues/22",target:"_blank",rel:"noopener noreferrer"}},[e._v("How is it different than "),t("code",[e._v("semantic-release")]),e._v(" - "),t("code",[e._v("github.com/conventional-changelog")]),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://github.com/semantic-release/semantic-release",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("semantic-release")]),t("OutboundLink")],1),e._v(" is a fully automated library/system for versioning, changelog generation, Git tagging, and publishing to the npm registry.")]),e._v(" "),e._m(43),e._v(" "),t("p",[e._v("They are both based on the same foundation of structured commit messages (using "),t("a",{attrs:{href:"https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Angular format"),t("OutboundLink")],1),e._v("), but "),t("code",[e._v("standard-version")]),e._v(" is a good choice for folks who are not yet comfortable letting publishes go out automatically. In this way, you can view "),t("code",[e._v("standard-version")]),e._v(" as an incremental step to adopting "),t("code",[e._v("semantic-release")]),e._v(".")])]),e._v(" "),e._m(44),e._v(" "),e._m(45),e._v(" "),t("p",[e._v("Setup a continuous delivery workflow with as much automation as possible from commit to deployment.")]),e._v(" "),t("p",[e._v("The CI service used is "),t("a",{attrs:{href:"https://travis-ci.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("TravisCI"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("GitHooks are managed by "),t("a",{attrs:{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"}},[e._v("Husky"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Commit message convention used is "),t("a",{attrs:{href:"https://www.conventionalcommits.org/en/v1.0.0-beta.3/",target:"_blank",rel:"noopener noreferrer"}},[e._v("www.conventionalcommits.org"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Commit messages are linted by "),t("a",{attrs:{href:"https://conventional-changelog.github.io/commitlint/#/",target:"_blank",rel:"noopener noreferrer"}},[e._v("commitlint"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Commit can be produced with the help of the "),t("a",{attrs:{href:"http://commitizen.github.io/cz-cli/",target:"_blank",rel:"noopener noreferrer"}},[e._v("commitizen CLI"),t("OutboundLink")],1),e._v(" with the "),t("a",{attrs:{href:"https://github.com/commitizen/cz-conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[e._v("cz-conventional-changelog"),t("OutboundLink")],1),e._v(" config.")]),e._v(" "),t("p",[e._v("Automation is provided by "),t("a",{attrs:{href:"https://github.com/semantic-release/semantic-release",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic-release"),t("OutboundLink")],1),e._v(".")]),e._v(" "),e._m(46),e._v(" "),e._m(47),e._v(" "),e._m(48),e._v(" "),e._m(49),e._v(" "),e._m(50),e._v(" "),t("p",[e._v("Every branch push trigger a CI job.")]),e._v(" "),t("p",[e._v("A CI job is composed of 3 stages :")]),e._v(" "),e._m(51),e._v(" "),t("p",[e._v("It also determine the version number, compute the release CHANGELOG, tag the tip of the branch and push it with release CHANGELOG to origin.")]),e._v(" "),e._m(52),e._v(" "),e._m(53),e._v(" "),e._m(54),e._v(" "),e._m(55),e._v(" "),e._m(56),e._v(" "),e._m(57),t("p",[e._v("install semantic-release in your project :")]),e._v(" "),e._m(58),t("p",[e._v("install semantic-release-cli :")]),e._v(" "),e._m(59),t("p",[e._v("configure semantic-release :")]),e._v(" "),e._m(60),t("p",[e._v("Answer the questions, you will need to provide your logins / passwords for npm registry and GitHub account.\nsemantic-release will generate tokens with them and will push them to TravisCI to allows the CI job to push into them.")]),e._v(" "),e._m(61),e._v(" "),e._m(62),e._v(" "),t("p",[e._v("install commitizen :")]),e._v(" "),e._m(63),e._m(64),e._v(" "),t("p",[t("code",[e._v("cz-conventional-changelog")]),e._v(" describe the desired commit format (for this example it is "),t("a",{attrs:{href:"https://www.conventionalcommits.org/en/v1.0.0-beta.3/",target:"_blank",rel:"noopener noreferrer"}},[e._v("the conventional changelog spec"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("p",[e._v("configure commitizen :")]),e._v(" "),e._m(65),e._v(" "),e._m(66),e._m(67),e._v(" "),e._m(68),e._m(69),e._v(" "),t("p",[e._v("commitizen usage :")]),e._v(" "),e._m(70),e._v(" "),t("p",[e._v("install commitlint :")]),e._v(" "),e._m(71),e._m(72),e._v(" "),e._m(73),e._v(" "),t("p",[e._v("configure commitlint :")]),e._v(" "),e._m(74),e._v(" "),e._m(75),e._m(76),e._v(" "),e._m(77),e._m(78),e._v(" "),e._m(79),e._v(" "),e._m(80),e._m(81),e._v(" "),t("p",[e._v("This content should do the job :")]),e._v(" "),e._m(82),e._m(83),e._v(" "),e._m(84),e._v(" "),t("p",[e._v("You should have already an initial commit. The message commit convention for this commit is not important.")]),e._v(" "),t("p",[e._v("The next commit should contain all this configuration and should be able to generate something to package and deliver to the npm registry.")]),e._v(" "),e._m(85),e._v(" "),e._m(86),e._v(" "),e._m(87),e._v(" "),e._m(88),e._v(" "),e._m(89),e._v(" "),t("p",[e._v("Check the CI result. Check also the npm registry.")]),e._v(" "),t("p",[e._v("At this point, if everything is ok you have the CI up and runnning and a first package version in the npm registry.")]),e._v(" "),e._m(90),e._v(" "),t("p",[e._v("The master branch needs also to be protected.")]),e._v(" "),t("p",[e._v("You can add rules to the protected branches to force some checks when a PR occurs.\nAfter the first CI completed job you are able to force a CI status check to validate a PR.")]),e._v(" "),t("p",[e._v("You're done.")])])}),[function(){var e=this._self._c;return e("h1",{attrs:{id:"tools-release-workflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tools-release-workflow"}},[this._v("#")]),this._v(" tools - release workflow")])},function(){var e=this,t=e._self._c;return t("ul",[t("li",[e._v("commit to be released")]),e._v(" "),t("li",[e._v("CHANGELOG generation")]),e._v(" "),t("li",[e._v("CHANGELOG commit")]),e._v(" "),t("li",[e._v("tagging")]),e._v(" "),t("li",[e._v("npm packaging")]),e._v(" "),t("li",[t("code",[e._v("git push")])]),e._v(" "),t("li",[e._v("Git PR/MR (Pull Request / Merge Request) resolution (including CI job)")]),e._v(" "),t("li",[e._v("release to npm registry or deploy to environment (depending of the deliverable nature)")])])},function(){var e=this._self._c;return e("p",[this._v("The operational workflow varies depending on "),e("em",[this._v("where")]),this._v(" theses tasks are executed.")])},function(){var e=this,t=e._self._c;return t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\ncommit ---\x3e CHANGELOG ---\x3e tag ---\x3e merge\n\n                            |\n                            |\n                            V\n\n                         package ---\x3e release\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])])},function(){var e=this._self._c;return e("h2",{attrs:{id:"foundation-basics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#foundation-basics"}},[this._v("#")]),this._v(" foundation basics")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"codebase-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#codebase-git"}},[this._v("#")]),this._v(" codebase (Git)")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"codebase-revisions-git-commits-messages-convention"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#codebase-revisions-git-commits-messages-convention"}},[this._v("#")]),this._v(" codebase revisions (Git commits messages convention)")])},function(){var e=this._self._c;return e("ul",[e("li",[this._v("CHANGELOG generation automation.")]),this._v(" "),e("li",[this._v("version generation (tagging) automation.")])])},function(){var e=this._self._c;return e("h3",{attrs:{id:"versions-system-semver"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#versions-system-semver"}},[this._v("#")]),this._v(" versions system (Semver)")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"deliverable-management-npm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deliverable-management-npm"}},[this._v("#")]),this._v(" deliverable management (npm)")])},function(){var e=this._self._c;return e("ul",[e("li",[this._v("Manage the dependencies in a project.")]),this._v(" "),e("li",[this._v('Structure the deliverable (named "package" in npm world), the npm registry store the deliverable. Users download packages from it.')])])},function(){var e=this._self._c;return e("p",[this._v("Commands like "),e("code",[this._v("npm build")]),this._v(", "),e("code",[this._v("npm test")]),this._v(", "),e("code",[this._v("npm ci")]),this._v(" are obviously also involved, but they are already involved in the development process.")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"articles"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#articles"}},[this._v("#")]),this._v(" articles")])},function(){var e=this,t=e._self._c;return t("blockquote",[t("ul",[t("li",[e._v("Automate your releases and semantic versioning with "),t("code",[e._v("semantic-release")])]),e._v(" "),t("li",[e._v("Use "),t("code",[e._v("commitizen")]),e._v(" with "),t("code",[e._v("cz-convential-changelog")]),e._v(" to capture additional details about each commit")]),e._v(" "),t("li",[e._v("Run Automated Tests that generate Code Coverage reports")]),e._v(" "),t("li",[e._v("Maintain coverage standards with "),t("code",[e._v("Codecov")])]),e._v(" "),t("li",[e._v("Ensure consistent code formatting, and avoid simple mistakes by Linting your code")]),e._v(" "),t("li",[e._v("Keep your dependencies up to date with "),t("code",[e._v("GreenKeeper")])])])])},function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("In this tutorial, I will show you how to configure Lerna with Conventional Commits to achieve automatic Semantic Release based only on the history of commits.")]),this._v(" "),e("p",[this._v("Conventional Commits + Conventional Changelog + Semantic Release + Commitlint")])])},function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("focus on lerna independent mode with semantic versioning.")])])},function(){var e=this._self._c;return e("h2",{attrs:{id:"tools-overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tools-overview"}},[this._v("#")]),this._v(" tools overview")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"monorepo-management"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#monorepo-management"}},[this._v("#")]),this._v(" monorepo management")])},function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("A tool for managing JavaScript projects with multiple packages")])])},function(){var e=this._self._c;return e("p",[this._v("Lerna config belongs to "),e("code",[this._v("lerna.json")]),this._v(" file.")])},function(){var e=this._self._c;return e("p",[this._v("Logs goes into "),e("code",[this._v("lerna-debug.log")]),this._v(" file.")])},function(){var e=this._self._c;return e("h4",{attrs:{id:"features"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[this._v("#")]),this._v(" Features")])},function(){var e=this,t=e._self._c;return t("ul",[t("li",[e._v("Version / tag management in 2 modes :\n"),t("ul",[t("li",[e._v("Fixed/Locked mode (every package got the same version number / tag)")]),e._v(" "),t("li",[e._v("Independent mode (each package got his own version number / tag)")])])]),e._v(" "),t("li",[e._v("Common "),t("code",[e._v("devDependencies")]),e._v(" (hoisting of common dependencies, most of the "),t("code",[e._v("devDependencies")]),e._v(" are commons)")])])},function(){var e=this._self._c;return e("h3",{attrs:{id:"dependencies-automatic-management"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dependencies-automatic-management"}},[this._v("#")]),this._v(" dependencies automatic management")])},function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("Get safety & consistency with real-time monitoring and automatic updates for npm dependencies")])])},function(){var e=this._self._c;return e("h3",{attrs:{id:"commit-message-management"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-management"}},[this._v("#")]),this._v(" commit message management")])},function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("A specification for adding human and machine readable meaning to commit messages")])])},function(){var e=this._self._c;return e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("&lt;type>[optional scope]: &lt;description>\n\n[optional body]\n\n[optional footer]\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br"),e("span",{staticClass:"line-number"},[this._v("3")]),e("br"),e("span",{staticClass:"line-number"},[this._v("4")]),e("br"),e("span",{staticClass:"line-number"},[this._v("5")]),e("br")])])},function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("Lint commit messages")])])},function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("The commitizen command line utility.")])])},function(){var e=this._self._c;return e("h3",{attrs:{id:"changelog-md-management"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#changelog-md-management"}},[this._v("#")]),this._v(" "),e("code",[this._v("CHANGELOG.md")]),this._v(" management")])},function(){var e=this,t=e._self._c;return t("ul",[t("li",[t("strong",[e._v("generate-changelog")]),e._v(" have really low usage.")]),e._v(" "),t("li",[t("strong",[e._v("conventional-changelog")]),e._v(" is the older and the most used but adoption seems stable.")]),e._v(" "),t("li",[t("strong",[e._v("semantic-release")]),e._v(" is growing quite fast since mid-2018, close to "),t("strong",[e._v("conventional-changelog")]),e._v(" adoption and still growing.")])])},function(){var e=this._self._c;return e("h4",{attrs:{id:"lob-generate-changelog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lob-generate-changelog"}},[this._v("#")]),this._v(" lob/generate-changelog")])},function(){var e=this._self._c;return e("p",[this._v("Limited to the "),e("code",[this._v("CHANGELOG.md")]),this._v(" file generation.")])},function(){var e=this._self._c;return e("h4",{attrs:{id:"conventional-changelog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conventional-changelog"}},[this._v("#")]),this._v(" conventional-changelog")])},function(){var e=this._self._c;return e("p",[e("strong",[this._v("Executed on the developer computer manually by the developer.")])])},function(){var e=this._self._c;return e("p",[e("code",[this._v("standard-version")]),this._v(" does the following:")])},function(){var e=this._self._c;return e("li",[this._v("commits "),e("em",[this._v("package.json (et al.)")]),this._v(" and "),e("em",[this._v("CHANGELOG.md")])])},function(){var e=this._self._c;return e("h4",{attrs:{id:"others-tools"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#others-tools"}},[this._v("#")]),this._v(" Others tools")])},function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("Create a GitHub/GitLab/etc. release using a project's commit messages and metadata.")])])},function(){var e=this._self._c;return e("h4",{attrs:{id:"semantic-release"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#semantic-release"}},[this._v("#")]),this._v(" semantic-release")])},function(){var e=this._self._c;return e("p",[e("strong",[this._v("semantic-release")]),this._v(" automates the whole package release workflow including: determining the next version number, generating the release notes and publishing the package.")])},function(){var e=this._self._c;return e("h4",{attrs:{id:"conventional-changelog-versus-semantic-release"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conventional-changelog-versus-semantic-release"}},[this._v("#")]),this._v(" conventional-changelog versus semantic-release")])},function(){var e=this._self._c;return e("p",[e("code",[this._v("standard-version")]),this._v(" is different because it handles the versioning, changelog generation, and Git tagging for you "),e("strong",[this._v("without")]),this._v(" automatic pushing (to GitHub) or publishing (to an npm registry). Use of "),e("code",[this._v("standard-version")]),this._v(" only affects your local Git repo - it doesn't affect remote resources at all. After you run "),e("code",[this._v("standard-version")]),this._v(", you still have to ability to review things and correct mistakes if you want to.")])},function(){var e=this._self._c;return e("h2",{attrs:{id:"a-working-continuous-delivery-workflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-working-continuous-delivery-workflow"}},[this._v("#")]),this._v(" a working continuous delivery workflow")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[this._v("#")]),this._v(" overview")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"git-workflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-workflow"}},[this._v("#")]),this._v(" Git workflow")])},function(){var e=this._self._c;return e("p",[this._v("Two branches, "),e("code",[this._v("master")]),this._v(" and "),e("code",[this._v("develop")]),this._v(", both must be protected.")])},function(){var e=this._self._c;return e("p",[e("code",[this._v("develop")]),this._v(" is the target for every PR. Set it as default branch instead of "),e("code",[this._v("master")]),this._v(" branch.")])},function(){var e=this._self._c;return e("p",[this._v("PR are done with classic features branches based on "),e("code",[this._v("develop")]),this._v(", never based on "),e("code",[this._v("master")]),this._v(".")])},function(){var e=this._self._c;return e("p",[e("code",[this._v("master")]),this._v(" is the distribution channel to deploy.")])},function(){var e=this,t=e._self._c;return t("ul",[t("li",[t("code",[e._v("commitlint")]),e._v(" stage to reject malformed commit message")]),e._v(" "),t("li",[t("code",[e._v("test")]),e._v(" stage to reject invalid commit content (test should execute at least lint + tests)")]),e._v(" "),t("li",[t("code",[e._v("deploy")]),e._v(" stage triggered only by the "),t("code",[e._v("master")]),e._v(" branch to build the package and deploy it to the npm registry.")])])},function(){var e=this,t=e._self._c;return t("p",[e._v("To deploy, the Git owner must merge locally "),t("code",[e._v("develop")]),e._v(" into "),t("code",[e._v("master")]),e._v(". It should be always a fast-forward, "),t("code",[e._v("develop")]),e._v(" and "),t("code",[e._v("master")]),e._v(" are mirrors.")])},function(){var e=this._self._c;return e("p",[this._v("Never use a PR to merge "),e("code",[this._v("develop")]),this._v(" into "),e("code",[this._v("master")]),this._v(", semantic-release will not trigger the deploy stage for a PR.")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[this._v("#")]),this._v(" installation")])},function(){var e=this._self._c;return e("p",[this._v("Before any steps, be sure to have a valid "),e("code",[this._v("package.json")]),this._v(" file, and especially a fulfilled "),e("code",[this._v('"repository"')]),this._v(" section in it.")])},function(){var e=this._self._c;return e("p",[this._v("You should also already have a "),e("code",[this._v(".npmignore")]),this._v(" file with a content like this :")])},function(){var e=this,t=e._self._c;return t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("node_modules/\npublic/\ndist/\nnpm-debug.log\n.DS_Store\n.idea/\n*.tgz\ntest-utils/\ntests/\n.editorconfig\n.eslintignore\n.eslintrc.json\n.npmrc\ntsconfig.json\ntsconfig-dev.json\ntslint.json\n.travis.yml\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])])},function(){var e=this._self._c;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[this._v("npm")]),this._v(" i "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-D")]),this._v(" semantic-release\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var e=this._self._c;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[this._v("npm")]),this._v(" i "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-g")]),this._v(" semantic-release-cli\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var e=this._self._c;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("semantic-release-cli setup\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var e=this._self._c;return e("p",[this._v("GitHub webhook will be automatically configured.\nTravisCI job will be automatically created and configured during the first deploy attempt (push on the "),e("code",[this._v("master")]),this._v(" branch).")])},function(){var e=this._self._c;return e("p",[this._v("The version number in your "),e("code",[this._v("package.json")]),this._v(" will be set to "),e("code",[this._v("0.0.0-development")]),this._v(" and will never move.\nsemantic-release modify only the "),e("code",[this._v("package.json")]),this._v(" put into the npm package sent to the registry.")])},function(){var e=this._self._c;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[this._v("npm")]),this._v(" i "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-D")]),this._v(" commitizen cz-conventional-changelog\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var e=this._self._c;return e("p",[e("code",[this._v("commitizen")]),this._v(" provide a CLI wizard to help creating valid commit messages")])},function(){var e=this._self._c;return e("p",[this._v("In your "),e("code",[this._v("package.json")]),this._v(", add this section to configure "),e("code",[this._v("commitizen")]),this._v(" :")])},function(){var e=this,t=e._self._c;return t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[e._v("    "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"config"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"commitizen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"path"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"./node_modules/cz-conventional-changelog"')]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])])},function(){var e=this._self._c;return e("p",[this._v("And under the "),e("code",[this._v("script")]),this._v(" section add this command :")])},function(){var e=this._self._c;return e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token property"}},[this._v('"cz-commit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[this._v(":")]),this._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[this._v('"git-cz"')]),this._v("\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var e=this._self._c;return e("p",[this._v("To avoid conflict with "),e("code",[this._v("husky")]),this._v(", prefix the script with "),e("code",[this._v("cz-")]),this._v(" (defaut in the documentation is just "),e("code",[this._v("commit")]),this._v(").")])},function(){var e=this._self._c;return e("p",[this._v("Stages the files you want to commit, then use the CLI tool with "),e("code",[this._v("npm run cz-commit")]),this._v(" then answer the questions.")])},function(){var e=this._self._c;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[this._v("npm")]),this._v(" i "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-D")]),this._v(" @commitlint/cli @commitlint/config-conventional @commitlint/travis-cli\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var e=this._self._c;return e("p",[this._v("Same as "),e("code",[this._v("commitizen")]),this._v(", the "),e("code",[this._v("commitlint")]),this._v(" CLI is configured with the "),e("code",[this._v("@commitlint/config-conventional")]),this._v(" package to define the commit message convention used.")])},function(){var e=this._self._c;return e("p",[this._v("The "),e("code",[this._v("@commitlint/travis-cli")]),this._v(" will be used in the TravisCI job to lint server side en enforce the convention.")])},function(){var e=this._self._c;return e("p",[this._v("Add this section to your "),e("code",[this._v("package.json")]),this._v(" to configure "),e("code",[this._v("commitlint")]),this._v(" :")])},function(){var e=this,t=e._self._c;return t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[e._v("    "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"commitlint"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"extends"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"@commitlint/config-conventional"')]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])])},function(){var e=this._self._c;return e("p",[this._v("Add a hook to the "),e("code",[this._v("husky")]),this._v(" configuration in your "),e("code",[this._v("package.json")]),this._v(" :")])},function(){var e=this,t=e._self._c;return t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[e._v("    "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"commit-msg"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"commitlint -E HUSKY_GIT_PARAMS"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])},function(){var e=this._self._c;return e("p",[this._v("Each local commit attempt will trigger "),e("code",[this._v("commitlint")]),this._v(".")])},function(){var e=this._self._c;return e("p",[this._v("Your "),e("code",[this._v("husky")]),this._v(" configuraton in your "),e("code",[this._v("package.json")]),this._v(" should look like this :")])},function(){var e=this,t=e._self._c;return t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[e._v("    "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"husky"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"hooks"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"commit-msg"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"commitlint -E HUSKY_GIT_PARAMS"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"pre-commit"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm test"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"pre-push"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm test"')]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])])},function(){var e=this._self._c;return e("p",[this._v("create and fill your "),e("code",[this._v(".travis.yml")]),this._v(" file.")])},function(){var e=this,t=e._self._c;return t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("language")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" node_js\n\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node_js")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cache")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" npm\n\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("install")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" npm ci\n\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("branches")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("except")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/^v\\d+\\.\\d+\\.\\d+$/'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("jobs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("include")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" commitlint\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("script")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" commitlint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("travis\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" test\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("script")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" npm run test\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" deploy\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" branch == master "),t("span",{pre:!0,attrs:{class:"token important"}},[e._v("&&")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token tag"}},[e._v("!fork")]),e._v("\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node_js")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'10'")]),e._v("\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("script")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" npm install "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("g semantic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("release@^15\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" semantic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("release\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br")])])},function(){var e=this._self._c;return e("p",[e("code",[this._v("semantic-release")]),this._v(" is tested only with the last LTS node version. So your app should do the same.")])},function(){var e=this._self._c;return e("h3",{attrs:{id:"initialize-the-workflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#initialize-the-workflow"}},[this._v("#")]),this._v(" initialize the workflow")])},function(){var e=this._self._c;return e("p",[this._v("Be careful to choose a "),e("em",[this._v("feat")]),this._v(" or "),e("em",[this._v("fix")]),this._v(" type for the commit message. Others type will not trigger a release.")])},function(){var e=this._self._c;return e("p",[this._v("The "),e("code",[this._v("develop")]),this._v(" branch should not exist yet.")])},function(){var e=this._self._c;return e("p",[this._v("When the commit is written, push it directly into "),e("code",[this._v("master")]),this._v(" to trigger the first CI job and the first deploy.")])},function(){var e=this._self._c;return e("p",[this._v("This deploy is mandatory because TravisCI needs the "),e("code",[this._v(".travis.yml")]),this._v(" files present into each branches in order to run.")])},function(){var e=this._self._c;return e("p",[this._v("So you need first to deploy a dummy app version, then the contribution branch which will be the destination for PR will be created based on "),e("code",[this._v("master")]),this._v(".")])},function(){var e=this._self._c;return e("p",[this._v("Now you can create the "),e("code",[this._v("develop")]),this._v(" branch in your remote repository. Don't forget to protect it and to set it to the default branch.")])}],!1,null,null,null);t.default=a.exports}}]);